//RFIDARRAY
#include <SPI.h>
#include <MFRC522.h>
#define SS_PIN 53
#define RST_PIN 49
MFRC522 rfid(SS_PIN, RST_PIN); // Instance of the class
MFRC522::MIFARE_Key key; 
// Init array that will store new NUID 
byte nuidPICC[4];
// Number of known default keys (hard-coded)
// NOTE: Synchronize the NR_KNOWN_KEYS define with the defaultKeys[] array
#define NR_KNOWN_KEYS 6
byte knownKeys[NR_KNOWN_KEYS][10] =  {
    {0x04, 0xD0, 0xB0, 0x18, 0x6F, 0x61, 0x80}, // SNAKE
    {0x04, 0xCE, 0x5D, 0x75, 0x8F, 0x61, 0x80}, // TURTLE
    {0x04, 0x83, 0xDF, 0x18, 0x6F, 0x61, 0x80}, // SNAIL
    {0x04, 0x11, 0xF2, 0x18, 0x6F, 0x61, 0x80}, // FOX
    {0x04, 0x9E, 0x60, 0x72, 0x8F, 0x61, 0x80}, // CHICKEN
    {0x04, 0x32, 0x23, 0x73, 0x8F, 0x61, 0x80}, // CAT
};
int currentKey;
//RFID

#define BUTTON_PIN_ARRAY 22

//LED ARRAY
#include <FastLED.h>
#define NUM_LEDS_ARRAY 64
#define DATA_PIN_ARRAY 3
CRGB leds[NUM_LEDS_ARRAY];
int symbols [6][64][3] = {
//SNAKE  
{{0, 0, 0}, {106, 190, 48}, {0, 0, 0}, {106, 190, 48}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
{106, 190, 48}, {95, 12, 12}, {106, 190, 48}, {95, 12, 12}, {106, 190, 48}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
{106, 190, 48}, {106, 190, 48}, {106, 190, 48}, {106, 190, 48}, {106, 190, 48}, {0, 0, 0}, {106, 190, 48}, {106, 190, 48}, 
{0, 0, 0}, {255, 255, 255}, {172, 50, 50}, {255, 255, 255}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {106, 190, 48}, 
{0, 0, 0}, {106, 190, 48}, {153, 229, 80}, {106, 190, 48}, {0, 0, 0}, {0, 0, 0}, {106, 190, 48}, {106, 190, 48}, 
{0, 0, 0}, {106, 190, 48}, {153, 229, 80}, {106, 190, 48}, {0, 0, 0}, {0, 0, 0}, {106, 190, 48}, {153, 229, 80}, 
{0, 0, 0}, {106, 190, 48}, {153, 229, 80}, {106, 190, 48}, {106, 190, 48}, {106, 190, 48}, {106, 190, 48}, {153, 229, 80}, 
{0, 0, 0}, {106, 190, 48}, {153, 229, 80}, {153, 229, 80}, {153, 229, 80}, {153, 229, 80}, {153, 229, 80}, {153, 229, 80}}, 
//TURTLE
{{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
{0, 0, 0}, {17, 109, 71}, {55, 148, 110}, {17, 109, 71}, {0, 0, 0}, {153, 229, 80}, {153, 229, 80}, {0, 0, 0}, 
{17, 109, 71}, {55, 148, 110}, {17, 109, 71}, {55, 148, 110}, {55, 148, 110}, {153, 229, 80}, {102, 57, 49}, {153, 229, 80}, 
{17, 109, 71}, {17, 109, 71}, {55, 148, 110}, {17, 109, 71}, {238, 195, 154}, {153, 229, 80}, {153, 229, 80}, {153, 229, 80}, 
{198, 150, 104}, {238, 195, 154}, {198, 150, 104}, {238, 195, 154}, {198, 150, 104}, {238, 195, 154}, {0, 0, 0}, {0, 0, 0}, 
{0, 0, 0}, {153, 229, 80}, {153, 229, 80}, {0, 0, 0}, {153, 229, 80}, {153, 229, 80}, {0, 0, 0}, {0, 0, 0}},
//SNAIL
{{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
{217, 160, 102}, {0, 0, 0}, {217, 160, 102}, {0, 0, 0}, {143, 86, 59}, {143, 86, 59}, {143, 86, 59}, {0, 0, 0}, 
{238, 195, 154}, {0, 0, 0}, {238, 195, 154}, {143, 86, 59}, {143, 86, 59}, {102, 57, 49}, {143, 86, 59}, {143, 86, 59}, 
{238, 195, 154}, {238, 195, 154}, {238, 195, 154}, {143, 86, 59}, {102, 57, 49}, {143, 86, 59}, {143, 86, 59}, {102, 57, 49}, 
{0, 0, 0}, {238, 195, 154}, {238, 195, 154}, {143, 86, 59}, {143, 86, 59}, {102, 57, 49}, {102, 57, 49}, {73, 28, 20}, 
{0, 0, 0}, {217, 160, 102}, {238, 195, 154}, {238, 195, 154}, {73, 28, 20}, {73, 28, 20}, {73, 28, 20}, {0, 0, 0}, 
{0, 0, 0}, {217, 160, 102}, {217, 160, 102}, {217, 160, 102}, {217, 160, 102}, {217, 160, 102}, {217, 160, 102}, {217, 160, 102}},
//FOX
{{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
{255, 255, 255}, {255, 255, 255}, {0, 0, 0}, {0, 0, 0}, {223, 113, 38}, {0, 0, 0}, {223, 113, 38}, {0, 0, 0}, 
{255, 255, 255}, {223, 113, 38}, {0, 0, 0}, {0, 0, 0}, {223, 113, 38}, {223, 113, 38}, {223, 113, 38}, {223, 113, 38}, 
{223, 113, 38}, {223, 113, 38}, {223, 113, 38}, {0, 0, 0}, {223, 113, 38}, {74, 33, 5}, {223, 113, 38}, {74, 33, 5}, 
{223, 113, 38}, {223, 113, 38}, {223, 113, 38}, {223, 113, 38}, {223, 113, 38}, {255, 255, 255}, {0, 0, 0}, {255, 255, 255}, 
{0, 0, 0}, {0, 0, 0}, {223, 113, 38}, {223, 113, 38}, {223, 113, 38}, {223, 113, 38}, {223, 113, 38}, {0, 0, 0}, 
{0, 0, 0}, {0, 0, 0}, {202, 96, 25}, {223, 113, 38}, {202, 96, 25}, {223, 113, 38}, {202, 96, 25}, {0, 0, 0}, 
{0, 0, 0}, {0, 0, 0}, {115, 53, 10}, {0, 0, 0}, {115, 53, 10}, {0, 0, 0}, {115, 53, 10}, {0, 0, 0}},
//CHICKEN
{{0, 0, 0}, {0, 0, 0}, {255, 0, 0}, {255, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
{0, 0, 0}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
{251, 242, 54}, {251, 242, 54}, {255, 255, 255}, {0, 0, 185}, {255, 255, 255}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
{0, 0, 0}, {255, 0, 0}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, 
{255, 0, 0}, {255, 255, 255}, {255, 0, 0}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {201, 246, 255}, 
{0, 0, 0}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {201, 246, 255}, {201, 246, 255}, {201, 246, 255}, {255, 255, 255}, 
{0, 0, 0}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, {255, 255, 255}, 
{0, 0, 0}, {0, 0, 0}, {251, 242, 54}, {251, 242, 54}, {0, 0, 0}, {251, 242, 54}, {251, 242, 54}, {0, 0, 0}},
//CAT
{{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 
{0, 0, 0}, {223, 113, 38}, {0, 0, 0}, {223, 113, 38}, {0, 0, 0}, {0, 0, 0}, {223, 113, 38}, {244, 225, 207}, 
{223, 113, 38}, {223, 113, 38}, {223, 113, 38}, {223, 113, 38}, {0, 0, 0}, {0, 0, 0}, {210, 100, 26}, {0, 0, 0}, 
{55, 148, 110}, {223, 113, 38}, {55, 148, 110}, {223, 113, 38}, {0, 0, 0}, {0, 0, 0}, {210, 100, 26}, {0, 0, 0}, 
{223, 113, 38}, {255, 179, 231}, {223, 113, 38}, {223, 113, 38}, {210, 100, 26}, {210, 100, 26}, {210, 100, 26}, {0, 0, 0}, 
{0, 0, 0}, {210, 100, 26}, {210, 100, 26}, {210, 100, 26}, {210, 100, 26}, {210, 100, 26}, {0, 0, 0}, {0, 0, 0}, 
{0, 0, 0}, {210, 100, 26}, {210, 100, 26}, {210, 100, 26}, {210, 100, 26}, {210, 100, 26}, {0, 0, 0}, {0, 0, 0}, 
{0, 0, 0}, {255, 255, 255}, {0, 0, 0}, {255, 255, 255}, {0, 0, 0}, {210, 100, 26}, {0, 0, 0}, {0, 0, 0}}
};
//LED ARRAY

bool readyToWin;
//RFIDARRAY 

















#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#include <Wire.h> 
#include <LiquidCrystal_I2C.h>

unsigned long last_time = 0;

LiquidCrystal_I2C lcd(0x27,20,4);

int padIndex = 0;
String padText1[6] = {"SNAKE","TURTLE","SNAIL","FOX","CHICKEN","CAT"};
String padText2[6] = {"TRIANGLE","CIRCLE","SQUARE","DIAMOND","",""};
String padText3[6] = {"RED","BLUE","PURPLE","","",""};
String currentPadText[6] = {"TEXT1","TEXT2","TEXT3","TEXT4","TEXT5","TEXT6"};


void setup()
{






  //RFID
  Serial.begin(9600);
  SPI.begin(); // Init SPI bus
  rfid.PCD_Init(); // Init MFRC522 
  for (byte i = 0; i < 6; i++) {
    key.keyByte[i] = 0xFF;
  }
  //RFID

  pinMode(BUTTON_PIN_ARRAY, INPUT);

  //LED ARRAY
  FastLED.addLeds<WS2812B,DATA_PIN_ARRAY,GRB>(leds,NUM_LEDS_ARRAY).setRgbw(RgbwDefault());
  FastLED.setBrightness(64);

  randomSeed(analogRead(0));
  currentKey = random(0, 6);
  ChangeSymbol(symbols[currentKey]);

  FastLED.show();
  //LED ARRAY











  Serial.begin(9600);
  lcd.init();
  lcd.backlight();
  lcd.setCursor(3,0);
  lcd.print("Welcome to");
  lcd.setCursor(3,1);
  lcd.print("ThinkBox !");

  for(int i = 0; i < 6; i++)
  {
    currentPadText[i] = padText1[i];
  }
}

void loop()
{

  // Print a heartbeat
  if (millis() > last_time + 20000)
  {
    Serial.println("Arduino is alive!!");
    last_time = millis();
  }

  switch(padIndex)
  {
    case 0:
      for(int i = 0; i < 6; i++)
      {
        currentPadText[i] = padText1[i];
      }
      break;
    case 1:
      for(int i = 0; i < 6; i++)
      {
        currentPadText[i] = padText2[i];
      }
      break;
    case 2:
      for(int i = 0; i < 6; i++)
      {
        currentPadText[i] = padText3[i];
      }
      break;
  }

  switch(Serial.read())
  {
    case 'y':
      LCDPrint("YES");
      break;
    case 'n':
      LCDPrint("NO");
      break;
    case 'm':
      LCDPrint("IDK");
      break;
    case 't':
      padIndex++;
      if(padIndex > 2) padIndex = 0;
      Serial.println(padIndex);
      break;
    case '1':
      LCDPrint(currentPadText[0]);
      break;
    case '2':
      LCDPrint(currentPadText[1]);
      break;
    case '3':
      LCDPrint(currentPadText[2]);
      break;
    case '4':
      LCDPrint(currentPadText[3]);
      break;
    case '5':
      LCDPrint(currentPadText[4]);
      break;
    case '6':
      LCDPrint(currentPadText[5]);
      break;
  }

}

void LCDPrint(String text) 
{
  lcd.clear();
  lcd.setCursor(8 - (int)(text.length() / 2),0);
  lcd.print(text);
}

